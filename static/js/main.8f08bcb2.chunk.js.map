{"version":3,"sources":["logo.svg","API/http.js","components/PostForm.js","components/Form2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","cityList","payload","axios","post","JSON","stringify","then","response","console","log","data","city","catch","error","getSuggestionValue","suggestion","PostForm","props","onChange","event","newValue","setState","value","onSuggestionsFetchRequested","suggestions","getSuggestions","onSuggestionsClearRequested","changeHandler","e","target","name","inputValue","trim","toLowerCase","inputLength","length","state","undefined","filter","lang","slice","city_id","this","className","renderSuggestion","inputProps","id","placeholder","_event","preventDefault","limit","normalize","forEach","el","push","Component","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8f08bcb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios'\r\n\r\n\r\n\r\nexport const regionList = (payload) => {\r\n\r\n\r\nreturn axios.post('http://altproduction.ru:8080/rest/v1/region/',JSON.stringify(payload)).then(response => {\r\n    console.log(response)\r\n    return response.data \r\n})\r\n.catch(error => {\r\n    console.log(error)\r\n    return error\r\n})\r\n}\r\n\r\nexport const districtList = (payload) => {\r\n\r\n\r\n    return axios.post('http://altproduction.ru:8080/rest/v1/district/',JSON.stringify(payload))\r\n.then(response => {\r\n        console.log(response)\r\n        return response.data\r\n})\r\n.catch(error => {\r\n        console.log(error)\r\n        return error\r\n})\r\n}\r\n\r\nexport const cityList = (payload) => {\r\n    return axios.post('http://altproduction.ru:8080/rest/v1/city/',JSON.stringify(payload))\r\n.then(response => {\r\n        console.log(response.data.city)\r\n        return response.data \r\n})\r\n.catch(error => {\r\n        console.log(error)\r\n        return error\r\n})\r\n}","import React, { Component } from \"react\";\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport { regionList, districtList, cityList } from \"../API/http\";\r\nimport \"./app.css\";\r\n\r\nconst getSuggestionValue = (suggestion) => suggestion;\r\n\r\nconst renderSuggestion = (suggestion) => (\r\n  <span>\r\n    {console.log(suggestion)}\r\n    {suggestion}\r\n  </span>\r\n);\r\n\r\nclass PostForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      city: \"\",\r\n      city_id:'',\r\n/*       district: \"\",\r\n      region: \"\",\r\n      value: \"\", */\r\n      suggestions: [],\r\n    };\r\n  }\r\n\r\n  onChange = (event, { newValue }) => {\r\n    this.setState({ value: newValue });\r\n  };\r\n\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    console.log(value);\r\n    this.setState({\r\n      suggestions: this.getSuggestions(value),\r\n    });\r\n  };\r\n\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: [],\r\n    });\r\n  };\r\n\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  getSuggestions = (value) => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    let { suggestions } = this.state;\r\n    console.log(suggestions);\r\n\r\n    if (suggestions == undefined) {\r\n      return (suggestions = \"\");\r\n    } else {\r\n      return inputLength === 0\r\n        ? []\r\n        : suggestions.filter(\r\n            (lang) => lang.toLowerCase().slice(0, inputLength) === inputValue\r\n          );\r\n    }\r\n  };\r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n    console.log(suggestions);\r\n\r\n    return (\r\n      <form>\r\n        <div className=\"sdfmsdfbvb\">\r\n          {/* <span>\r\n            <Autosuggest\r\n              suggestions={suggestions}\r\n              onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n              onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n              getSuggestionValue={getSuggestionValue}\r\n              renderSuggestion={(suggestions) => (\r\n                <span>\r\n                  {console.log(suggestions)}\r\n                  {suggestions}\r\n                </span>\r\n              )}\r\n              inputProps={{\r\n                id: \"region\",\r\n                name: \"region\",\r\n                value: this.state.region,\r\n                placeholder: \"Область\",\r\n                onChange: (_event, { newValue }) => {\r\n                  _event.preventDefault();\r\n                  let payload = {\r\n                    region: newValue,\r\n                  };\r\n\r\n                  regionList(payload).then((data) => {\r\n                    if (data.error) {\r\n                      console.log(data.error);\r\n                      return;\r\n                    }\r\n                    let { regions } = data;\r\n                    console.log(regions);\r\n                    this.setState({ suggestions: regions });\r\n                  });\r\n\r\n                  this.setState({ region: newValue });\r\n                },\r\n              }}\r\n            />\r\n          </span>\r\n\r\n          <span>\r\n            <Autosuggest\r\n              suggestions={suggestions}\r\n              onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n              onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n              getSuggestionValue={getSuggestionValue}\r\n              renderSuggestion={(suggestions) => (\r\n                <span>\r\n                  {console.log(suggestions)}\r\n                  {suggestions.district}\r\n                </span>\r\n              )}\r\n              inputProps={{\r\n                id: \"district\",\r\n                name: \"district\",\r\n                value: this.state.district,\r\n                placeholder: \"Район\",\r\n                onChange: (_event, { newValue }) => {\r\n                  _event.preventDefault();\r\n                  let payload = {\r\n                    region: this.state.region,\r\n                    district: newValue,\r\n                    limit: 10,\r\n                  };\r\n\r\n                  districtList(payload).then((data) => {\r\n                    if (data.error) {\r\n                      console.log(data.error);\r\n                    }\r\n                    let { districts } = data;\r\n                    this.setState({ suggestions: districts });\r\n                  });\r\n\r\n                  this.setState({ district: newValue });\r\n                },\r\n              }}\r\n            />\r\n          </span> */}\r\n\r\n          <span>\r\n            <Autosuggest\r\n              suggestions={suggestions}\r\n              onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n              onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n              getSuggestionValue={getSuggestionValue}\r\n              renderSuggestion={(suggestions) => (\r\n                <span>\r\n                  {console.log(suggestions)}\r\n                  {suggestions.city}\r\n                </span>\r\n              )}\r\n              inputProps={{\r\n                id: \"city\",\r\n                name: \"city\",\r\n                value: this.state.city,\r\n                placeholder: \"Населенный пункт\",\r\n                onChange: (_event, { newValue }) => {\r\n                  _event.preventDefault();\r\n                  let payload = {\r\n                    city: newValue,\r\n                    limit: 10,\r\n                  };\r\n\r\n                  cityList(payload).then((data) => {\r\n                    if (data.error) {\r\n                      console.log(data.error);\r\n                    }\r\n                    let { city } = data;\r\n                    let normalize = [];\r\n                    city.forEach((el) => {\r\n                      normalize.push(el.city);\r\n                    });\r\n                    if(city[\"0\"].id) this.state.city_id = city[\"0\"].id\r\n                    else if (city[\"0\"].id==\"undefined\" ){ this.state.city_id = \"null\"}\r\n                    console.log(normalize);\r\n                    this.setState({ suggestions: normalize });\r\n                  });\r\n\r\n                  this.setState({ city: newValue });\r\n                },\r\n              }}\r\n            />\r\n          </span>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default PostForm;\r\n","import React, { Component } from \"react\";\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport {cityList } from \"../API/http\";\r\nimport \"./app.css\";\r\n\r\n\r\n/*   // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\r\n  function escapeRegexCharacters(str) {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n  }\r\n  \r\n  function getSuggestions(value) {\r\n    const escapedValue = escapeRegexCharacters(value.trim());\r\n    const regex = new RegExp('^' + escapedValue, 'i');\r\n  // return cities.filter(city => regex.test(city.city) || regex.test(city.id));\r\n  }\r\n  \r\n  function getSuggestionNickname(suggestion) {\r\n    return suggestion.nickname;\r\n  }\r\n  \r\n  function getSuggestionEmail(suggestion) {\r\n    return suggestion.email;\r\n  }\r\n  \r\n  function renderSuggestion(suggestion) {\r\n    return (\r\n    <span>{suggestion.nickname} - {suggestion.email}</span>\r\n    );\r\n  }\r\n  \r\n  class Form2 extends React.Component {\r\n    constructor() {\r\n      super();\r\n  \r\n      this.state = {\r\n        nicknameValue: '',\r\n        nicknameSuggestions: [],\r\n        emailValue: '',\r\n        emailSuggestions: []\r\n      };    \r\n    }\r\n  \r\n    onNicknameChange = (event, { newValue }) => {\r\n        event.preventDefault();\r\n        let payload = {\r\n            city: newValue,\r\n            limit:10\r\n          };\r\n\r\n          cityList(payload).then((data) => {\r\n            if (data.error) {\r\n              console.log(data.error);\r\n            }\r\n            let { city } = data;\r\n            let normalize = [];\r\n            city.forEach((el) => {\r\n              normalize.push(el.city);\r\n            });\r\n            console.log(normalize);\r\n            this.setState({ suggestions: normalize });\r\n          });\r\n\r\n          this.setState({ nicknameValue: newValue });\r\n        };\r\n\r\n  \r\n    onEmailChange = (event, { newValue }) => {\r\n      this.setState({\r\n        emailValue: newValue\r\n      });\r\n    };\r\n    \r\n    onNicknameSuggestionsFetchRequested = ({ value }) => {\r\n      this.setState({\r\n        nicknameSuggestions: getSuggestions(value)\r\n      });\r\n    };\r\n  \r\n    onNicknameSuggestionsClearRequested = () => {\r\n      this.setState({\r\n        nicknameSuggestions: []\r\n      });\r\n    };\r\n  \r\n    onNicknameSuggestionSelected = (event, { suggestion }) => {\r\n      this.setState({\r\n        emailValue: suggestion.email\r\n      });\r\n    };\r\n  \r\n    onEmailSuggestionsFetchRequested = ({ value }) => {\r\n      this.setState({\r\n        emailSuggestions: getSuggestions(value)\r\n      });\r\n    };\r\n  \r\n    onEmailSuggestionsClearRequested = () => {\r\n      this.setState({\r\n        emailSuggestions: []\r\n      });\r\n    };\r\n  \r\n    onEmailSuggestionSelected = (event, { suggestion }) => {\r\n      this.setState({\r\n        nicknameValue: suggestion.nickname\r\n      });\r\n    };\r\n  \r\n    render() {\r\n      const { \r\n        nicknameValue, \r\n        nicknameSuggestions, \r\n        emailValue, \r\n        emailSuggestions \r\n      } = this.state;\r\n      const nicknameInputProps = {\r\n        placeholder: \"nickname\",\r\n        value: nicknameValue,\r\n        onChange: this.onNicknameChange\r\n      };\r\n      const emailInputProps = {\r\n        placeholder: \"email\",\r\n        value: emailValue,\r\n        onChange: this.onEmailChange\r\n      };\r\n  \r\n      return (\r\n        <div className=\"container\">\r\n          <Autosuggest \r\n            suggestions={nicknameSuggestions}\r\n            onSuggestionsFetchRequested={this.onNicknameSuggestionsFetchRequested}\r\n            onSuggestionsClearRequested={this.onNicknameSuggestionsClearRequested}\r\n            onSuggestionSelected={this.onNicknameSuggestionSelected}\r\n            getSuggestionValue={getSuggestionNickname}\r\n            renderSuggestion={renderSuggestion}\r\n            inputProps={nicknameInputProps}\r\n          />\r\n          <Autosuggest \r\n            suggestions={emailSuggestions}\r\n            onSuggestionsFetchRequested={this.onEmailSuggestionsFetchRequested}\r\n            onSuggestionsClearRequested={this.onEmailSuggestionsClearRequested}\r\n            onSuggestionSelected={this.onEmailSuggestionSelected}\r\n            getSuggestionValue={getSuggestionEmail}\r\n            renderSuggestion={renderSuggestion}\r\n            inputProps={emailInputProps}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } */\r\n\r\n  function getSuggestionValue(suggestion) {\r\n    return suggestion.name;\r\n  }\r\n  \r\n  function renderSuggestion(suggestion) {\r\n    return (\r\n      <span>{suggestion.name}</span>\r\n    );\r\n  }\r\n  \r\n  class Form2 extends React.Component {\r\n    constructor() {\r\n      super();\r\n  \r\n      this.state = {\r\n        value: '',\r\n        suggestions: []\r\n      };    \r\n    }\r\n  \r\n    onChange = (event, { newValue}) => {\r\n      console.log(newValue)\r\n      this.setState({\r\n        value: newValue\r\n      });\r\n    };\r\n    \r\n    onSuggestionsFetchRequested = () => {\r\n      let payload = {\r\n        city: this.state.value,\r\n        limit: 10,\r\n      };\r\n      cityList(payload).then((data) => {\r\n        if (data.error) {\r\n          console.log(data.error);\r\n        }\r\n        let { city } = data;\r\n        this.setState({ suggestions: city });\r\n      });\r\n      \r\n      /* fetch(`https://swapi.co/api/people/?search=${value}`)\r\n        .then(response => response.json())\r\n        .then(data => this.setState({ suggestions: data.results })) */\r\n    }\r\n  \r\n    onSuggestionsClearRequested = () => {\r\n      this.setState({\r\n        suggestions: []\r\n      });\r\n    };\r\n  \r\n    render() {\r\n      const { value, suggestions } = this.state;\r\n      const inputProps = {\r\n        placeholder: \"Search Star Wars\",\r\n        value,\r\n        onChange: this.onChange\r\n      };\r\n  \r\n      return (\r\n        <Autosuggest \r\n          suggestions={suggestions}\r\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n          getSuggestionValue={getSuggestionValue}\r\n          renderSuggestion={renderSuggestion}\r\n          inputProps={inputProps} />\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Form2;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PostForm from './components/PostForm';\nimport Form2 from \"./components/Form2\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PostForm></PostForm>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}